{
  "address": "0x5443BC41529a192f36b0386DcB89b85d0D805D7f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_turing",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_api",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attacker",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "name": "Attack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Dead",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NewEntity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "OffchainRandom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "PayloadReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attacker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isInProximity",
          "type": "bool"
        }
      ],
      "name": "ProximityResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "request",
          "type": "bytes"
        }
      ],
      "name": "Request",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "resp",
          "type": "bytes"
        }
      ],
      "name": "SimpleAttack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_HEALTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "api",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_attacker",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "attack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "health",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "simpleAttack",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "turing",
      "outputs": [
        {
          "internalType": "contract TuringHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a7175b01a64b6efa76feb3ced9a04326c8eeda8f71f43fb596453126ec36625",
  "receipt": {
    "to": null,
    "from": "0x844d0D97FA044Bc9F2F541B018130Ad108388033",
    "contractAddress": "0x5443BC41529a192f36b0386DcB89b85d0D805D7f",
    "transactionIndex": 0,
    "gasUsed": "2850414",
    "logsBloom": "0x
    "blockHash": "0xd78d032a7119ddb32db2152bd4a1ba4b98c7f07d05823aca89bc5516baeeaa58",
    "transactionHash": "0x6a7175b01a64b6efa76feb3ced9a04326c8eeda8f71f43fb596453126ec36625",
    "logs": [],
    "blockNumber": 104943,
    "cumulativeGasUsed": "2850414",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7d579B7dc97e2ddC03E5f293A0627b2E34B5392F",
    "https://contract-playground.herokuapp.com/api/turing-proximity"
  ],
  "numDeployments": 14,
  "solcInputHash": "0c30d40e32a8ef7707eb65bd30713cc3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_turing\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_api\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attacker\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"Attack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Dead\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NewEntity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"OffchainRandom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"PayloadReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attacker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isInProximity\",\"type\":\"bool\"}],\"name\":\"ProximityResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"Request\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"resp\",\"type\":\"bytes\"}],\"name\":\"SimpleAttack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_HEALTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"api\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_attacker\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"health\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"simpleAttack\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turing\",\"outputs\":[{\"internalType\":\"contract TuringHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Entity.sol\":\"Entity\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @dev Note that balanceOf does not revert if passed the zero address, in defiance of the ERC.\\nabstract contract ERC721 {\\n    /*///////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                          METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            ERC721 STORAGE                        \\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(uint256 => address) public ownerOf;\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || msg.sender == getApproved[id] || isApprovedForAll[from][msg.sender],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            balanceOf[from]--;\\n\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public pure virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            balanceOf[to]++;\\n        }\\n\\n        ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = ownerOf[id];\\n\\n        require(ownerOf[id] != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            balanceOf[owner]--;\\n        }\\n\\n        delete ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                       INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC721.sol)\\ninterface ERC721TokenReceiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xf97378ab999188b3d5d97037fabbecbc726892c74cba6536899b852eb4756d6a\",\"license\":\"AGPL-3.0-only\"},\"contracts/Entity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"@rari-capital/solmate/src/tokens/ERC721.sol\\\";\\nimport \\\"./TuringHelper.sol\\\";\\n\\ncontract Entity is ERC721 {\\n\\n  uint256 public tokenId;\\n  TuringHelper public turing;\\n  string public api;\\n\\n  uint256 public constant MAX_HEALTH = 5;\\n\\n  // tokenId => health\\n  mapping(uint256 => uint256) public health;\\n\\n  event NewEntity(address indexed owner, uint256 tokenId);\\n  event Attack(uint256 indexed attacker, uint256 indexed target);\\n  event Dead(uint256 indexed tokenId);\\n  event PayloadReceived(bytes payload);\\n  event Request(bytes request);\\n  event ProximityResult(uint256 attacker, uint256 target, bool isInProximity);\\n  event OffchainRandom(uint256 randomNumber);\\n\\n  constructor(address _turing, string memory _api) ERC721(\\\"Entity\\\", \\\"ENTITY\\\") {\\n    turing = TuringHelper(_turing);\\n    api = _api;\\n    tokenId = 1;\\n  }\\n\\n  function tokenURI(uint256 _tokenId) public pure override returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  function mint() external returns (uint256) {\\n    uint256 newTokenId = tokenId++;\\n    _mint(msg.sender, newTokenId);\\n    health[newTokenId] = MAX_HEALTH;\\n    emit NewEntity(msg.sender, newTokenId);\\n  }\\n\\n  function getRandomNumber() external returns (uint256) {\\n    uint256 random = turing.TuringRandom();\\n    emit OffchainRandom(random);\\n    return random;\\n  }\\n\\n  function attack(uint256 _attacker, uint256 _target) external {\\n    require(msg.sender == ownerOf[_attacker], \\\"Unauthorized\\\");\\n    require(health[_attacker] > 0, \\\"Attacker is dead\\\");\\n    require(health[_target] > 0, \\\"Target is dead\\\");\\n\\n    // turing proximity check\\n    bytes memory payload = abi.encode(_attacker, _target);\\n    emit Request(payload);\\n\\n    bytes memory resp = turing.TuringTx(api, payload);\\n    emit PayloadReceived(resp);\\n\\n    bool isInProximity = abi.decode(resp, (bool));\\n    emit ProximityResult(_attacker, _target, isInProximity);\\n\\n    require(isInProximity, \\\"Attacker is out of range\\\");\\n\\n    health[_target]--;\\n    emit Attack(_attacker, _target);\\n\\n    if (health[_target] == 0) emit Dead(_target);\\n  }\\n\\n  event SimpleAttack(bytes payload, bytes resp);\\n  function simpleAttack() external returns (bytes memory) {\\n    bytes memory payload = abi.encode(1, 2);\\n    bytes memory resp = turing.TuringTx(api, payload);\\n    emit SimpleAttack(payload, resp);\\n    return resp;\\n  }\\n\\n}\",\"keccak256\":\"0x30600ecaf20712fab2ecff465a87b69953c17cc16bdd006462895b0591043eba\",\"license\":\"MIT\"},\"contracts/ITuringHelper.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ITuringHelper {\\n\\n  /* Called from the external contract. It takes an api endponit URL\\n     and an abi-encoded request payload. The URL and the list of allowed\\n     methods are supplied when the contract is created. In the future\\n     some of this registration might be moved into l2geth, allowing for\\n     security measures such as TLS client certificates. A configurable timeout\\n     could also be added.\\n     Logs the offchain response so that a future verifier or fraud prover\\n     can replay the transaction and ensure that it results in the same state\\n     root as during the initial execution. Note - a future version might\\n     need to include a timestamp and/or more details about the\\n     offchain interaction.\\n  */\\n  function TuringTx(string memory _url, bytes memory _payload) external returns (bytes memory);\\n}\",\"keccak256\":\"0x667ffa22ca6a57d8d4a83f90e1264302f0a645bc5f00b78e0032b920fdf3429b\",\"license\":\"UNLICENSED\"},\"contracts/TuringHelper.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nimport \\\"./ITuringHelper.sol\\\";\\n\\ncontract TuringHelper is ITuringHelper, Ownable {\\n\\n  TuringHelper Self;\\n\\n  // This protects your own credits for this helper contract\\n  mapping(address => bool) public permittedCaller;\\n\\n  event AddPermittedCaller(address _callerAddress);\\n  event RemovePermittedCaller(address _callerAddress);\\n  event CheckPermittedCaller(address _callerAddress, bool permitted);\\n  event OffchainResponse(uint version, bytes responseData);\\n  event OffchainRandom(uint version, uint256 random);\\n  event Offchain42(uint version, uint256 random);\\n\\n  modifier onlyPermittedCaller() {\\n    require(\\n      permittedCaller[msg.sender],\\n      'Invalid Caller Address'\\n    );\\n    _;\\n  }\\n\\n  constructor () public {\\n    Self = TuringHelper(address(this));\\n  }\\n\\n  function addPermittedCaller(address _callerAddress)\\n    public onlyOwner {\\n      permittedCaller[_callerAddress] = true;\\n      emit AddPermittedCaller(_callerAddress);\\n  }\\n\\n  function removePermittedCaller(address _callerAddress)\\n    public onlyOwner {\\n      permittedCaller[_callerAddress] = false;\\n      emit RemovePermittedCaller(_callerAddress);\\n  }\\n\\n  function checkPermittedCaller(address _callerAddress)\\n    public returns (bool) {\\n      bool permitted = permittedCaller[_callerAddress];\\n      emit CheckPermittedCaller(_callerAddress, permitted);\\n      return permitted;\\n  }\\n\\n  function GetErrorCode(uint32 rType)\\n    internal view returns (string memory) {\\n      if(rType ==  1) return \\\"TURING: Geth intercept failure\\\";\\n      if(rType == 10) return \\\"TURING: Incorrect input state\\\";\\n      if(rType == 11) return \\\"TURING: Calldata too short\\\";\\n      if(rType == 12) return \\\"TURING: URL >64 bytes\\\";\\n      if(rType == 13) return \\\"TURING: Server error\\\";\\n      if(rType == 14) return \\\"TURING: Could not decode server response\\\";\\n      if(rType == 15) return \\\"TURING: Could not create rpc client\\\";\\n      if(rType == 16) return \\\"TURING: RNG failure\\\";\\n      if(rType == 17) return \\\"TURING: API Response >322 chars\\\";\\n      if(rType == 18) return \\\"TURING: API Response >160 bytes\\\";\\n      if(rType == 19) return \\\"TURING: Insufficient credit\\\";\\n      if(rType == 20) return \\\"TURING: Missing cache entry\\\";\\n  }\\n\\n  /* This is the interface to the off-chain mechanism. Although\\n     marked as \\\"public\\\", it is only to be called by TuringCall()\\n     or TuringTX().\\n     The _payload parameter is overloaded to represent either the\\n     request parameters or the off-chain response, with the rType\\n     parameter indicating which is which.\\n     When called as a request (rType == 1), it starts the offchain call,\\n     which, if all all goes well, results in the rType changing to 2.\\n     This response is then passed back to the caller.\\n  */\\n  function GetResponse(uint32 rType, string memory _url, bytes memory _payload)\\n    public returns (bytes memory) {\\n\\n    require (msg.sender == address(this), \\\"Turing:GetResponse:msg.sender != address(this)\\\");\\n    require (_payload.length > 0, \\\"Turing:GetResponse:no payload\\\");\\n    require (rType == 2, string(GetErrorCode(rType))); // l2geth can pass values here to provide debug information\\n    return _payload;\\n  }\\n\\n  function GetRandom(uint32 rType, uint256 _random)\\n    public returns (uint256) {\\n\\n    require (msg.sender == address(this), \\\"Turing:GetResponse:msg.sender != address(this)\\\");\\n    require (rType == 2, string(GetErrorCode(rType)));\\n    return _random;\\n  }\\n\\n  function Get42(uint32 rType, uint256 _random)\\n    public returns (uint256) {\\n\\n    require (msg.sender == address(this), \\\"Turing:GetResponse:msg.sender != address(this)\\\");\\n    require (rType == 2, string(GetErrorCode(rType)));\\n    return _random;\\n  }\\n\\n  /* Called from the external contract. It takes an api endponit URL\\n     and an abi-encoded request payload. The URL and the list of allowed\\n     methods are supplied when the contract is created. In the future\\n     some of this registration might be moved into l2geth, allowing for\\n     security measures such as TLS client certificates. A configurable timeout\\n     could also be added.\\n     Logs the offchain response so that a future verifier or fraud prover\\n     can replay the transaction and ensure that it results in the same state\\n     root as during the initial execution. Note - a future version might\\n     need to include a timestamp and/or more details about the\\n     offchain interaction.\\n  */\\n  function TuringTx(string memory _url, bytes memory _payload)\\n    public onlyPermittedCaller override returns (bytes memory) {\\n      require (_payload.length > 0, \\\"Turing:TuringTx:no payload\\\");\\n\\n      /* Initiate the request. This can't be a local function call\\n         because that would stay inside the EVM and not give l2geth\\n         a place to intercept and re-write the call.\\n      */\\n      bytes memory response = Self.GetResponse(1, _url, _payload);\\n      emit OffchainResponse(0x01, response);\\n      return response;\\n  }\\n\\n  function TuringRandom()\\n    public onlyPermittedCaller returns (uint256) {\\n\\n      uint256 response = Self.GetRandom(1, 0);\\n      emit OffchainRandom(0x01, response);\\n      return response;\\n  }\\n\\n  function Turing42()\\n    public onlyPermittedCaller returns (uint256) {\\n\\n      uint256 response = Self.Get42(2, 42);\\n      emit Offchain42(0x01, response);\\n      return response;\\n  }\\n\\n    // ERC165 check interface\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        bytes4 firstSupportedInterface = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\")); // ERC165\\n        bytes4 secondSupportedInterface = ITuringHelper.TuringTx.selector;\\n        return _interfaceId == firstSupportedInterface || _interfaceId == secondSupportedInterface;\\n    }\\n}\",\"keccak256\":\"0xeabe934d226f894d02e490f250ed9dc6a3ab8e77e570739aa34c636f58fbc4bb\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e5038038062002e508339818101604052810190620000379190620003f3565b6040518060400160405280600681526020017f456e7469747900000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f454e5449545900000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb92919062000141565b508060019080519060200190620000d492919062000141565b50505081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600890805190602001906200013092919062000141565b5060016006819055505050620004bd565b8280546200014f9062000488565b90600052602060002090601f016020900481019282620001735760008555620001bf565b82601f106200018e57805160ff1916838001178555620001bf565b82800160010185558215620001bf579182015b82811115620001be578251825591602001919060010190620001a1565b5b509050620001ce9190620001d2565b5090565b5b80821115620001ed576000816000905550600101620001d3565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002328262000205565b9050919050565b620002448162000225565b81146200025057600080fd5b50565b600081519050620002648162000239565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002bf8262000274565b810181811067ffffffffffffffff82111715620002e157620002e062000285565b5b80604052505050565b6000620002f6620001f1565b9050620003048282620002b4565b919050565b600067ffffffffffffffff82111562000327576200032662000285565b5b620003328262000274565b9050602081019050919050565b60005b838110156200035f57808201518184015260208101905062000342565b838111156200036f576000848401525b50505050565b60006200038c620003868462000309565b620002ea565b905082815260208101848484011115620003ab57620003aa6200026f565b5b620003b88482856200033f565b509392505050565b600082601f830112620003d857620003d76200026a565b5b8151620003ea84826020860162000375565b91505092915050565b600080604083850312156200040d576200040c620001fb565b5b60006200041d8582860162000253565b925050602083015167ffffffffffffffff81111562000441576200044062000200565b5b6200044f85828601620003c0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004a157607f821691505b602082108103620004b757620004b662000459565b5b50919050565b61298380620004cd6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80636ac1a2d5116100b8578063b88d4fde1161007c578063b88d4fde14610379578063c87b56dd14610395578063d2c18e0b146103c5578063dbdff2c1146103e3578063e1fa763814610401578063e985e9c51461041d57610142565b80636ac1a2d5146102c157806370a08231146102df578063783b6d601461030f57806395d89b411461033f578063a22cb4651461035d57610142565b806317d70f7c1161010a57806317d70f7c146101ff57806323b872dd1461021d57806342842e0e146102395780634a9ae0b81461025557806350c897ba146102735780636352211e1461029157610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c55780631249c58b146101e1575b600080fd5b610161600480360381019061015c91906119af565b61044d565b60405161016e91906119f7565b60405180910390f35b61017f6104df565b60405161018c9190611aab565b60405180910390f35b6101af60048036038101906101aa9190611b03565b61056d565b6040516101bc9190611b71565b60405180910390f35b6101df60048036038101906101da9190611bb8565b6105a0565b005b6101e9610789565b6040516101f69190611c07565b60405180910390f35b61020761081a565b6040516102149190611c07565b60405180910390f35b61023760048036038101906102329190611c22565b610820565b005b610253600480360381019061024e9190611c22565b610c1f565b005b61025d610d57565b60405161026a9190611c07565b60405180910390f35b61027b610d5c565b6040516102889190611cd4565b60405180910390f35b6102ab60048036038101906102a69190611b03565b610d82565b6040516102b89190611b71565b60405180910390f35b6102c9610db5565b6040516102d69190611d44565b60405180910390f35b6102f960048036038101906102f49190611d66565b610eca565b6040516103069190611c07565b60405180910390f35b61032960048036038101906103249190611b03565b610ee2565b6040516103369190611c07565b60405180910390f35b610347610efa565b6040516103549190611aab565b60405180910390f35b61037760048036038101906103729190611dbf565b610f88565b005b610393600480360381019061038e9190611f34565b611085565b005b6103af60048036038101906103aa9190611b03565b6111c0565b6040516103bc9190611aab565b60405180910390f35b6103cd6111d9565b6040516103da9190611aab565b60405180910390f35b6103eb611267565b6040516103f89190611c07565b60405180910390f35b61041b60048036038101906104169190611fb7565b61133d565b005b61043760048036038101906104329190611ff7565b611702565b60405161044491906119f7565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104a857506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104d85750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600080546104ec90612066565b80601f016020809104026020016040519081016040528092919081815260200182805461051890612066565b80156105655780601f1061053a57610100808354040283529160200191610565565b820191906000526020600020905b81548152906001019060200180831161054857829003601f168201915b505050505081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106985750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6106d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ce906120e3565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000806006600081548092919061079f90612132565b9190505590506107af3382611731565b600560096000838152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f37d84b1d86b4b40a1b1220180ad7cdc6803e6fa4682b60480acb1f94ea32ec878260405161080e9190611c07565b60405180910390a25090565b60065481565b6003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146108c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b8906121c6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092790612232565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109c857506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610a595750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f906120e3565b60405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b610c2a838383610820565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610d13575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610caf93929190612278565b6020604051808303816000875af1158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf291906122d7565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4990612350565b60405180910390fd5b505050565b600581565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060016002604051602001610dce9291906123f3565b60405160208183030381529060405290506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f7adf436008846040518363ffffffff1660e01b8152600401610e3f9291906124b1565b6000604051808303816000875af1158015610e5e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e879190612558565b90507fb00cadc7e06ce9b54dad2fcd69ecf3a803db9e118d266d302785e1ccb101449b8282604051610eba9291906125a1565b60405180910390a1809250505090565b60026020528060005260406000206000915090505481565b60096020528060005260406000206000915090505481565b60018054610f0790612066565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3390612066565b8015610f805780601f10610f5557610100808354040283529160200191610f80565b820191906000526020600020905b815481529060010190602001808311610f6357829003601f168201915b505050505081565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161107991906119f7565b60405180910390a35050565b611090848484610820565b60008373ffffffffffffffffffffffffffffffffffffffff163b148061117b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168373ffffffffffffffffffffffffffffffffffffffff1663150b7a02338786866040518563ffffffff1660e01b815260040161111794939291906125d8565b6020604051808303816000875af1158015611136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115a91906122d7565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6111ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b190612350565b60405180910390fd5b50505050565b6060604051806020016040528060008152509050919050565b600880546111e690612066565b80601f016020809104026020016040519081016040528092919081815260200182805461121290612066565b801561125f5780601f106112345761010080835404028352916020019161125f565b820191906000526020600020905b81548152906001019060200180831161124257829003601f168201915b505050505081565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345ff812a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd9190612639565b90507f26621688d6d2da548f51a933fccdd674ea0bce3f07c53ea90f3bf40712d0e71d8160405161132e9190611c07565b60405180910390a18091505090565b6003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d5906126b2565b60405180910390fd5b6000600960008481526020019081526020016000205411611434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142b9061271e565b60405180910390fd5b600060096000838152602001908152602001600020541161148a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114819061278a565b60405180910390fd5b6000828260405160200161149f9291906127aa565b60405160208183030381529060405290507fca3554f6049b3221e2c64b16d878678c608304508287a842363b26bc0bcf6bb3816040516114df9190611d44565b60405180910390a16000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f7adf436008846040518363ffffffff1660e01b81526004016115479291906124b1565b6000604051808303816000875af1158015611566573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061158f9190612558565b90507f7647e2f31c61e0afb978474d1f37a36b283e5095860fabdc40069f39f030e427816040516115c09190611d44565b60405180910390a16000818060200190518101906115de91906127e8565b90507fa5c0bc7ea642bd3dc9b99bce22877878ed2bd04e615261d29949df65de86a4ef85858360405161161393929190612815565b60405180910390a18061165b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165290612898565b60405180910390fd5b60096000858152602001908152602001600020600081548092919061167f906128b8565b919050555083857f722bf2499704ddf6a39d5d4255ae6b6ed3dab17d2fb7155f877f86d53b83824660405160405180910390a360006009600086815260200190815260200160002054036116fb57837f50da336189cb35711eb9fd1da5b9d19e4a7098abee6c0fd219d4f9f1a36cf8fa60405160405180910390a25b5050505050565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179790612232565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611842576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118399061292d565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61198c81611957565b811461199757600080fd5b50565b6000813590506119a981611983565b92915050565b6000602082840312156119c5576119c461194d565b5b60006119d38482850161199a565b91505092915050565b60008115159050919050565b6119f1816119dc565b82525050565b6000602082019050611a0c60008301846119e8565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a4c578082015181840152602081019050611a31565b83811115611a5b576000848401525b50505050565b6000601f19601f8301169050919050565b6000611a7d82611a12565b611a878185611a1d565b9350611a97818560208601611a2e565b611aa081611a61565b840191505092915050565b60006020820190508181036000830152611ac58184611a72565b905092915050565b6000819050919050565b611ae081611acd565b8114611aeb57600080fd5b50565b600081359050611afd81611ad7565b92915050565b600060208284031215611b1957611b1861194d565b5b6000611b2784828501611aee565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b5b82611b30565b9050919050565b611b6b81611b50565b82525050565b6000602082019050611b866000830184611b62565b92915050565b611b9581611b50565b8114611ba057600080fd5b50565b600081359050611bb281611b8c565b92915050565b60008060408385031215611bcf57611bce61194d565b5b6000611bdd85828601611ba3565b9250506020611bee85828601611aee565b9150509250929050565b611c0181611acd565b82525050565b6000602082019050611c1c6000830184611bf8565b92915050565b600080600060608486031215611c3b57611c3a61194d565b5b6000611c4986828701611ba3565b9350506020611c5a86828701611ba3565b9250506040611c6b86828701611aee565b9150509250925092565b6000819050919050565b6000611c9a611c95611c9084611b30565b611c75565b611b30565b9050919050565b6000611cac82611c7f565b9050919050565b6000611cbe82611ca1565b9050919050565b611cce81611cb3565b82525050565b6000602082019050611ce96000830184611cc5565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611d1682611cef565b611d208185611cfa565b9350611d30818560208601611a2e565b611d3981611a61565b840191505092915050565b60006020820190508181036000830152611d5e8184611d0b565b905092915050565b600060208284031215611d7c57611d7b61194d565b5b6000611d8a84828501611ba3565b91505092915050565b611d9c816119dc565b8114611da757600080fd5b50565b600081359050611db981611d93565b92915050565b60008060408385031215611dd657611dd561194d565b5b6000611de485828601611ba3565b9250506020611df585828601611daa565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e4182611a61565b810181811067ffffffffffffffff82111715611e6057611e5f611e09565b5b80604052505050565b6000611e73611943565b9050611e7f8282611e38565b919050565b600067ffffffffffffffff821115611e9f57611e9e611e09565b5b611ea882611a61565b9050602081019050919050565b82818337600083830152505050565b6000611ed7611ed284611e84565b611e69565b905082815260208101848484011115611ef357611ef2611e04565b5b611efe848285611eb5565b509392505050565b600082601f830112611f1b57611f1a611dff565b5b8135611f2b848260208601611ec4565b91505092915050565b60008060008060808587031215611f4e57611f4d61194d565b5b6000611f5c87828801611ba3565b9450506020611f6d87828801611ba3565b9350506040611f7e87828801611aee565b925050606085013567ffffffffffffffff811115611f9f57611f9e611952565b5b611fab87828801611f06565b91505092959194509250565b60008060408385031215611fce57611fcd61194d565b5b6000611fdc85828601611aee565b9250506020611fed85828601611aee565b9150509250929050565b6000806040838503121561200e5761200d61194d565b5b600061201c85828601611ba3565b925050602061202d85828601611ba3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061207e57607f821691505b60208210810361209157612090612037565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b60006120cd600e83611a1d565b91506120d882612097565b602082019050919050565b600060208201905081810360008301526120fc816120c0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061213d82611acd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361216f5761216e612103565b5b600182019050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b60006121b0600a83611a1d565b91506121bb8261217a565b602082019050919050565b600060208201905081810360008301526121df816121a3565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b600061221c601183611a1d565b9150612227826121e6565b602082019050919050565b6000602082019050818103600083015261224b8161220f565b9050919050565b50565b6000612262600083611cfa565b915061226d82612252565b600082019050919050565b600060808201905061228d6000830186611b62565b61229a6020830185611b62565b6122a76040830184611bf8565b81810360608301526122b881612255565b9050949350505050565b6000815190506122d181611983565b92915050565b6000602082840312156122ed576122ec61194d565b5b60006122fb848285016122c2565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b600061233a601083611a1d565b915061234582612304565b602082019050919050565b600060208201905081810360008301526123698161232d565b9050919050565b6000819050919050565b600060ff82169050919050565b60006123a261239d61239884612370565b611c75565b61237a565b9050919050565b6123b281612387565b82525050565b6000819050919050565b60006123dd6123d86123d3846123b8565b611c75565b61237a565b9050919050565b6123ed816123c2565b82525050565b600060408201905061240860008301856123a9565b61241560208301846123e4565b9392505050565b60008190508160005260206000209050919050565b6000815461243e81612066565b6124488186611a1d565b945060018216600081146124635760018114612475576124a8565b60ff19831686526020860193506124a8565b61247e8561241c565b60005b838110156124a057815481890152600182019150602081019050612481565b808801955050505b50505092915050565b600060408201905081810360008301526124cb8185612431565b905081810360208301526124df8184611d0b565b90509392505050565b60006124fb6124f684611e84565b611e69565b90508281526020810184848401111561251757612516611e04565b5b612522848285611a2e565b509392505050565b600082601f83011261253f5761253e611dff565b5b815161254f8482602086016124e8565b91505092915050565b60006020828403121561256e5761256d61194d565b5b600082015167ffffffffffffffff81111561258c5761258b611952565b5b6125988482850161252a565b91505092915050565b600060408201905081810360008301526125bb8185611d0b565b905081810360208301526125cf8184611d0b565b90509392505050565b60006080820190506125ed6000830187611b62565b6125fa6020830186611b62565b6126076040830185611bf8565b81810360608301526126198184611d0b565b905095945050505050565b60008151905061263381611ad7565b92915050565b60006020828403121561264f5761264e61194d565b5b600061265d84828501612624565b91505092915050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b600061269c600c83611a1d565b91506126a782612666565b602082019050919050565b600060208201905081810360008301526126cb8161268f565b9050919050565b7f41747461636b6572206973206465616400000000000000000000000000000000600082015250565b6000612708601083611a1d565b9150612713826126d2565b602082019050919050565b60006020820190508181036000830152612737816126fb565b9050919050565b7f5461726765742069732064656164000000000000000000000000000000000000600082015250565b6000612774600e83611a1d565b915061277f8261273e565b602082019050919050565b600060208201905081810360008301526127a381612767565b9050919050565b60006040820190506127bf6000830185611bf8565b6127cc6020830184611bf8565b9392505050565b6000815190506127e281611d93565b92915050565b6000602082840312156127fe576127fd61194d565b5b600061280c848285016127d3565b91505092915050565b600060608201905061282a6000830186611bf8565b6128376020830185611bf8565b61284460408301846119e8565b949350505050565b7f41747461636b6572206973206f7574206f662072616e67650000000000000000600082015250565b6000612882601883611a1d565b915061288d8261284c565b602082019050919050565b600060208201905081810360008301526128b181612875565b9050919050565b60006128c382611acd565b9150600082036128d6576128d5612103565b5b600182039050919050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000612917600e83611a1d565b9150612922826128e1565b602082019050919050565b600060208201905081810360008301526129468161290a565b905091905056fea26469706673582212206f525efd240a0bacb9dea92d12ff3e37889834f87d9ecb3b611857f65a4c340f64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80636ac1a2d5116100b8578063b88d4fde1161007c578063b88d4fde14610379578063c87b56dd14610395578063d2c18e0b146103c5578063dbdff2c1146103e3578063e1fa763814610401578063e985e9c51461041d57610142565b80636ac1a2d5146102c157806370a08231146102df578063783b6d601461030f57806395d89b411461033f578063a22cb4651461035d57610142565b806317d70f7c1161010a57806317d70f7c146101ff57806323b872dd1461021d57806342842e0e146102395780634a9ae0b81461025557806350c897ba146102735780636352211e1461029157610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c55780631249c58b146101e1575b600080fd5b610161600480360381019061015c91906119af565b61044d565b60405161016e91906119f7565b60405180910390f35b61017f6104df565b60405161018c9190611aab565b60405180910390f35b6101af60048036038101906101aa9190611b03565b61056d565b6040516101bc9190611b71565b60405180910390f35b6101df60048036038101906101da9190611bb8565b6105a0565b005b6101e9610789565b6040516101f69190611c07565b60405180910390f35b61020761081a565b6040516102149190611c07565b60405180910390f35b61023760048036038101906102329190611c22565b610820565b005b610253600480360381019061024e9190611c22565b610c1f565b005b61025d610d57565b60405161026a9190611c07565b60405180910390f35b61027b610d5c565b6040516102889190611cd4565b60405180910390f35b6102ab60048036038101906102a69190611b03565b610d82565b6040516102b89190611b71565b60405180910390f35b6102c9610db5565b6040516102d69190611d44565b60405180910390f35b6102f960048036038101906102f49190611d66565b610eca565b6040516103069190611c07565b60405180910390f35b61032960048036038101906103249190611b03565b610ee2565b6040516103369190611c07565b60405180910390f35b610347610efa565b6040516103549190611aab565b60405180910390f35b61037760048036038101906103729190611dbf565b610f88565b005b610393600480360381019061038e9190611f34565b611085565b005b6103af60048036038101906103aa9190611b03565b6111c0565b6040516103bc9190611aab565b60405180910390f35b6103cd6111d9565b6040516103da9190611aab565b60405180910390f35b6103eb611267565b6040516103f89190611c07565b60405180910390f35b61041b60048036038101906104169190611fb7565b61133d565b005b61043760048036038101906104329190611ff7565b611702565b60405161044491906119f7565b60405180910390f35b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104a857506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104d85750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600080546104ec90612066565b80601f016020809104026020016040519081016040528092919081815260200182805461051890612066565b80156105655780601f1061053a57610100808354040283529160200191610565565b820191906000526020600020905b81548152906001019060200180831161054857829003601f168201915b505050505081565b60046020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106985750600560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6106d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ce906120e3565b60405180910390fd5b826004600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000806006600081548092919061079f90612132565b9190505590506107af3382611731565b600560096000838152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f37d84b1d86b4b40a1b1220180ad7cdc6803e6fa4682b60480acb1f94ea32ec878260405161080e9190611c07565b60405180910390a25090565b60065481565b6003600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146108c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b8906121c6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092790612232565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109c857506004600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610a595750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b610a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8f906120e3565b60405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600190039190505550600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b610c2a838383610820565b60008273ffffffffffffffffffffffffffffffffffffffff163b1480610d13575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168273ffffffffffffffffffffffffffffffffffffffff1663150b7a023386856040518463ffffffff1660e01b8152600401610caf93929190612278565b6020604051808303816000875af1158015610cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf291906122d7565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b610d52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4990612350565b60405180910390fd5b505050565b600581565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600060016002604051602001610dce9291906123f3565b60405160208183030381529060405290506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f7adf436008846040518363ffffffff1660e01b8152600401610e3f9291906124b1565b6000604051808303816000875af1158015610e5e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e879190612558565b90507fb00cadc7e06ce9b54dad2fcd69ecf3a803db9e118d266d302785e1ccb101449b8282604051610eba9291906125a1565b60405180910390a1809250505090565b60026020528060005260406000206000915090505481565b60096020528060005260406000206000915090505481565b60018054610f0790612066565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3390612066565b8015610f805780601f10610f5557610100808354040283529160200191610f80565b820191906000526020600020905b815481529060010190602001808311610f6357829003601f168201915b505050505081565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161107991906119f7565b60405180910390a35050565b611090848484610820565b60008373ffffffffffffffffffffffffffffffffffffffff163b148061117b575063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168373ffffffffffffffffffffffffffffffffffffffff1663150b7a02338786866040518563ffffffff1660e01b815260040161111794939291906125d8565b6020604051808303816000875af1158015611136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115a91906122d7565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b6111ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b190612350565b60405180910390fd5b50505050565b6060604051806020016040528060008152509050919050565b600880546111e690612066565b80601f016020809104026020016040519081016040528092919081815260200182805461121290612066565b801561125f5780601f106112345761010080835404028352916020019161125f565b820191906000526020600020905b81548152906001019060200180831161124257829003601f168201915b505050505081565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166345ff812a6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156112d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fd9190612639565b90507f26621688d6d2da548f51a933fccdd674ea0bce3f07c53ea90f3bf40712d0e71d8160405161132e9190611c07565b60405180910390a18091505090565b6003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d5906126b2565b60405180910390fd5b6000600960008481526020019081526020016000205411611434576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142b9061271e565b60405180910390fd5b600060096000838152602001908152602001600020541161148a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114819061278a565b60405180910390fd5b6000828260405160200161149f9291906127aa565b60405160208183030381529060405290507fca3554f6049b3221e2c64b16d878678c608304508287a842363b26bc0bcf6bb3816040516114df9190611d44565b60405180910390a16000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f7adf436008846040518363ffffffff1660e01b81526004016115479291906124b1565b6000604051808303816000875af1158015611566573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061158f9190612558565b90507f7647e2f31c61e0afb978474d1f37a36b283e5095860fabdc40069f39f030e427816040516115c09190611d44565b60405180910390a16000818060200190518101906115de91906127e8565b90507fa5c0bc7ea642bd3dc9b99bce22877878ed2bd04e615261d29949df65de86a4ef85858360405161161393929190612815565b60405180910390a18061165b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165290612898565b60405180910390fd5b60096000858152602001908152602001600020600081548092919061167f906128b8565b919050555083857f722bf2499704ddf6a39d5d4255ae6b6ed3dab17d2fb7155f877f86d53b83824660405160405180910390a360006009600086815260200190815260200160002054036116fb57837f50da336189cb35711eb9fd1da5b9d19e4a7098abee6c0fd219d4f9f1a36cf8fa60405160405180910390a25b5050505050565b60056020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179790612232565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611842576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118399061292d565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61198c81611957565b811461199757600080fd5b50565b6000813590506119a981611983565b92915050565b6000602082840312156119c5576119c461194d565b5b60006119d38482850161199a565b91505092915050565b60008115159050919050565b6119f1816119dc565b82525050565b6000602082019050611a0c60008301846119e8565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a4c578082015181840152602081019050611a31565b83811115611a5b576000848401525b50505050565b6000601f19601f8301169050919050565b6000611a7d82611a12565b611a878185611a1d565b9350611a97818560208601611a2e565b611aa081611a61565b840191505092915050565b60006020820190508181036000830152611ac58184611a72565b905092915050565b6000819050919050565b611ae081611acd565b8114611aeb57600080fd5b50565b600081359050611afd81611ad7565b92915050565b600060208284031215611b1957611b1861194d565b5b6000611b2784828501611aee565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b5b82611b30565b9050919050565b611b6b81611b50565b82525050565b6000602082019050611b866000830184611b62565b92915050565b611b9581611b50565b8114611ba057600080fd5b50565b600081359050611bb281611b8c565b92915050565b60008060408385031215611bcf57611bce61194d565b5b6000611bdd85828601611ba3565b9250506020611bee85828601611aee565b9150509250929050565b611c0181611acd565b82525050565b6000602082019050611c1c6000830184611bf8565b92915050565b600080600060608486031215611c3b57611c3a61194d565b5b6000611c4986828701611ba3565b9350506020611c5a86828701611ba3565b9250506040611c6b86828701611aee565b9150509250925092565b6000819050919050565b6000611c9a611c95611c9084611b30565b611c75565b611b30565b9050919050565b6000611cac82611c7f565b9050919050565b6000611cbe82611ca1565b9050919050565b611cce81611cb3565b82525050565b6000602082019050611ce96000830184611cc5565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611d1682611cef565b611d208185611cfa565b9350611d30818560208601611a2e565b611d3981611a61565b840191505092915050565b60006020820190508181036000830152611d5e8184611d0b565b905092915050565b600060208284031215611d7c57611d7b61194d565b5b6000611d8a84828501611ba3565b91505092915050565b611d9c816119dc565b8114611da757600080fd5b50565b600081359050611db981611d93565b92915050565b60008060408385031215611dd657611dd561194d565b5b6000611de485828601611ba3565b9250506020611df585828601611daa565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e4182611a61565b810181811067ffffffffffffffff82111715611e6057611e5f611e09565b5b80604052505050565b6000611e73611943565b9050611e7f8282611e38565b919050565b600067ffffffffffffffff821115611e9f57611e9e611e09565b5b611ea882611a61565b9050602081019050919050565b82818337600083830152505050565b6000611ed7611ed284611e84565b611e69565b905082815260208101848484011115611ef357611ef2611e04565b5b611efe848285611eb5565b509392505050565b600082601f830112611f1b57611f1a611dff565b5b8135611f2b848260208601611ec4565b91505092915050565b60008060008060808587031215611f4e57611f4d61194d565b5b6000611f5c87828801611ba3565b9450506020611f6d87828801611ba3565b9350506040611f7e87828801611aee565b925050606085013567ffffffffffffffff811115611f9f57611f9e611952565b5b611fab87828801611f06565b91505092959194509250565b60008060408385031215611fce57611fcd61194d565b5b6000611fdc85828601611aee565b9250506020611fed85828601611aee565b9150509250929050565b6000806040838503121561200e5761200d61194d565b5b600061201c85828601611ba3565b925050602061202d85828601611ba3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061207e57607f821691505b60208210810361209157612090612037565b5b50919050565b7f4e4f545f415554484f52495a4544000000000000000000000000000000000000600082015250565b60006120cd600e83611a1d565b91506120d882612097565b602082019050919050565b600060208201905081810360008301526120fc816120c0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061213d82611acd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361216f5761216e612103565b5b600182019050919050565b7f57524f4e475f46524f4d00000000000000000000000000000000000000000000600082015250565b60006121b0600a83611a1d565b91506121bb8261217a565b602082019050919050565b600060208201905081810360008301526121df816121a3565b9050919050565b7f494e56414c49445f524543495049454e54000000000000000000000000000000600082015250565b600061221c601183611a1d565b9150612227826121e6565b602082019050919050565b6000602082019050818103600083015261224b8161220f565b9050919050565b50565b6000612262600083611cfa565b915061226d82612252565b600082019050919050565b600060808201905061228d6000830186611b62565b61229a6020830185611b62565b6122a76040830184611bf8565b81810360608301526122b881612255565b9050949350505050565b6000815190506122d181611983565b92915050565b6000602082840312156122ed576122ec61194d565b5b60006122fb848285016122c2565b91505092915050565b7f554e534146455f524543495049454e5400000000000000000000000000000000600082015250565b600061233a601083611a1d565b915061234582612304565b602082019050919050565b600060208201905081810360008301526123698161232d565b9050919050565b6000819050919050565b600060ff82169050919050565b60006123a261239d61239884612370565b611c75565b61237a565b9050919050565b6123b281612387565b82525050565b6000819050919050565b60006123dd6123d86123d3846123b8565b611c75565b61237a565b9050919050565b6123ed816123c2565b82525050565b600060408201905061240860008301856123a9565b61241560208301846123e4565b9392505050565b60008190508160005260206000209050919050565b6000815461243e81612066565b6124488186611a1d565b945060018216600081146124635760018114612475576124a8565b60ff19831686526020860193506124a8565b61247e8561241c565b60005b838110156124a057815481890152600182019150602081019050612481565b808801955050505b50505092915050565b600060408201905081810360008301526124cb8185612431565b905081810360208301526124df8184611d0b565b90509392505050565b60006124fb6124f684611e84565b611e69565b90508281526020810184848401111561251757612516611e04565b5b612522848285611a2e565b509392505050565b600082601f83011261253f5761253e611dff565b5b815161254f8482602086016124e8565b91505092915050565b60006020828403121561256e5761256d61194d565b5b600082015167ffffffffffffffff81111561258c5761258b611952565b5b6125988482850161252a565b91505092915050565b600060408201905081810360008301526125bb8185611d0b565b905081810360208301526125cf8184611d0b565b90509392505050565b60006080820190506125ed6000830187611b62565b6125fa6020830186611b62565b6126076040830185611bf8565b81810360608301526126198184611d0b565b905095945050505050565b60008151905061263381611ad7565b92915050565b60006020828403121561264f5761264e61194d565b5b600061265d84828501612624565b91505092915050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b600061269c600c83611a1d565b91506126a782612666565b602082019050919050565b600060208201905081810360008301526126cb8161268f565b9050919050565b7f41747461636b6572206973206465616400000000000000000000000000000000600082015250565b6000612708601083611a1d565b9150612713826126d2565b602082019050919050565b60006020820190508181036000830152612737816126fb565b9050919050565b7f5461726765742069732064656164000000000000000000000000000000000000600082015250565b6000612774600e83611a1d565b915061277f8261273e565b602082019050919050565b600060208201905081810360008301526127a381612767565b9050919050565b60006040820190506127bf6000830185611bf8565b6127cc6020830184611bf8565b9392505050565b6000815190506127e281611d93565b92915050565b6000602082840312156127fe576127fd61194d565b5b600061280c848285016127d3565b91505092915050565b600060608201905061282a6000830186611bf8565b6128376020830185611bf8565b61284460408301846119e8565b949350505050565b7f41747461636b6572206973206f7574206f662072616e67650000000000000000600082015250565b6000612882601883611a1d565b915061288d8261284c565b602082019050919050565b600060208201905081810360008301526128b181612875565b9050919050565b60006128c382611acd565b9150600082036128d6576128d5612103565b5b600182039050919050565b7f414c52454144595f4d494e544544000000000000000000000000000000000000600082015250565b6000612917600e83611a1d565b9150612922826128e1565b602082019050919050565b600060208201905081810360008301526129468161290a565b905091905056fea26469706673582212206f525efd240a0bacb9dea92d12ff3e37889834f87d9ecb3b611857f65a4c340f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 155,
        "contract": "contracts/Entity.sol:Entity",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 157,
        "contract": "contracts/Entity.sol:Entity",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 168,
        "contract": "contracts/Entity.sol:Entity",
        "label": "balanceOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 172,
        "contract": "contracts/Entity.sol:Entity",
        "label": "ownerOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 176,
        "contract": "contracts/Entity.sol:Entity",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 182,
        "contract": "contracts/Entity.sol:Entity",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 650,
        "contract": "contracts/Entity.sol:Entity",
        "label": "tokenId",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 653,
        "contract": "contracts/Entity.sol:Entity",
        "label": "turing",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(TuringHelper)1370"
      },
      {
        "astId": 655,
        "contract": "contracts/Entity.sol:Entity",
        "label": "api",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 662,
        "contract": "contracts/Entity.sol:Entity",
        "label": "health",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(TuringHelper)1370": {
        "encoding": "inplace",
        "label": "contract TuringHelper",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}